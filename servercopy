#!/bin/tcsh
#
# Makes a copy of the MERMAID server and pushes the metadata in
# processed form to the server. This comprises rsyncing data, running
# VIT2TBL for location organization and VITEXPORT for Web publishing.  
#
# Last input from aetimmes-at-princeton.edu, 10/08/2018
# Last modified by fjsimons-at-alum.mit.edu, 05/07/2024

# Where was I, so I can return to it
set returnto = `pwd`

# Where will all the data be copied TO?
set whereto =  /u/fjsimons/MERMAID/server
set wherest =  /u/fjsimons/MERMAID/sustech
set whereps =  /u/fjsimons/MERMAID/psdmaid
set wherejp =  /u/fjsimons/MERMAID/moby

# Where will, additionally, all the *.VIT files be copied TO?
set wherevit = /u/fjsimons/MERMAID/serverdata/vitdata
# And where will the *.tbl files go?
set wheretbl = /u/fjsimons/MERMAID/serverdata/tbldata

# Do not mess with SCP as you will need to supply passwords.
# The better solution for setting up a CRON job via passwordless
# single-command-use SSH keys. Of course the public keys need to be
# present on the respective servers, and the appropriate range for
# which they are designed needs to be identified using RRSYNC. 

# From Princeton at Princeton, we get it all
echo "\nRSYNCING PRINCETON MERMAIDS\n"
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av mermaid@mermaid.princeton.edu:\*.\* $whereto

# From Stanford at Princeton, we also get it all
echo "\nRSYNCING STANFORD MERMAIDS\n"
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av psdmaid@mermaid.princeton.edu:\*.\* $whereps

# From GeoAzur at Nice, we just get the relevant data 
echo "\nRSYNCING NICE MERMAIDS\n"
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av eso@mermaid.unice.fr:\*.MER $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av eso@mermaid.unice.fr:\*.LOG $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av eso@mermaid.unice.fr:\*.vit $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av eso@mermaid.unice.fr:\*.cmd $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av eso@mermaid.unice.fr:\*.out $whereto

# From KobeUni at GeoAzur at Nice, we just get the relevant data
echo "\nRSYNCING KOBE MERMAIDS\n"
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av kobeuni@mermaid.unice.fr:\*.MER $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av kobeuni@mermaid.unice.fr:\*.LOG $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av kobeuni@mermaid.unice.fr:\*.vit $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av kobeuni@mermaid.unice.fr:\*.cmd $whereto
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av kobeuni@mermaid.unice.fr:\*.out $whereto

# From SUSTECH at Shenzhen, we just get the relevant data - store them separately
echo "\nRSYNCING SUSTECH MERMAIDS\n"
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av mermaid@134.175.126.179:\*.MER $wherest
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av mermaid@134.175.126.179:\*.LOG $wherest
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av mermaid@134.175.126.179:\*.vit $wherest
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av mermaid@134.175.126.179:\*.cmd $wherest
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av mermaid@134.175.126.179:\*.out $wherest
rsync -e "ssh -i /u/fjsimons/.ssh/id_remote_backup" -av mermaid@134.175.126.179:\*.BIN $wherest

# From JAMSTEC at CLS, we just get the relevant data - by LFTP MIRROR instead of RRSYNC
set upass1  = `cat /u/fjsimons/EarthScopeOceans/CLS/Preparation/mermaid_0101`
set upass2  = `cat /u/fjsimons/EarthScopeOceans/CLS/Preparation/mermaid_0102`
lftp -u $upass1 -e "lcd '$wherejp' ; mirror -c -f *.vit ; mirror -c -f *.MER ; mirror -c -f *.BIN ; mirror -c -f *.cmd ; mirror -c -f *.out ; mirror -c -f *.S61 ; quit;" sftp://iridium-rudics.cls.fr
lftp -u $upass2 -e "lcd '$wherejp' ; mirror -c -f *.vit ; mirror -c -f *.MER ; mirror -c -f *.BIN ; mirror -c -f *.cmd ; mirror -c -f *.out ; mirror -c -f *.S61 ; quit;" sftp://iridium-rudics.cls.fr

# Then, go into the copied directories and use GIT to ink it in
cd $whereto
git add .
git commit -m "A whole fresh copy made"

cd $wherest
git add .
git commit -m "A whole fresh copy made"

cd $whereps
git add .
git commit -m "A whole fresh copy made"

cd $wherejp
git add .
git commit -m "A whole fresh copy made"

# Then, copy the *vit files separately for extra care
/bin/cp -u $whereto/*.vit $wherevit
/bin/cp -u $wherest/*.vit $wherevit
/bin/cp -u $whereps/*.vit $wherevit
/bin/cp -u $wherejp/*.vit $wherevit

# Make a local backup of that *vit file repository also
cd $wherevit
git add .
git commit -m "A whole fresh copy made"

# Alternative is to use the run_vit2tbl version but then how to pass arguments to it?
setenv LD_LIBRARY_PATH .:$MCRROOT/runtime/glnxa64:$MCRROOT/bin/glnxa64:$MCRROOT/sys/os/glnxa64:$MCRROOT/sys/opengl/lib/glnxa64

# And then these *.vit files need to be converted to *.tbl files via a MATLAB precompiled code
set vitfiles = `ls *.vit`
foreach file ($vitfiles[*])
    echo Processing $wherevit/$file
    # Only changes the extension even though the station names have been uniformly pentadigitized
   /u/fjsimons/PROGRAMS/MFILES/mermaid/vit2tbl $wherevit/$file $wheretbl/$file:r.tbl
end

# Do not forget to unset it!
unsetenv LD_LIBRARY_PATH

# And these *.tbl files then need to be pushed/synced onto GEOWEB using this script
/u/fjsimons/PROGRAMS/UFILES/vitexport

# Return to where I was
cd $returnto
